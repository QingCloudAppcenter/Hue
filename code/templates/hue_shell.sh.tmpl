#!/bin/bash
HUE_HOME=/usr/local/hue
PATH="/sbin:/usr/sbin:/bin:/usr/bin:$HUE_HOME/build/env/bin/"
export PATH

MYSQL_DATA=/data/mysql
CONF_DIR=$HUE_HOME/desktop/conf
LOG_DIR=/data/hue/logs
TIMEOUT=10
PIDFILE=supervisor.pid;PID=$HUE_HOME/$PIDFILE
HUE_USER=yunify;HUE_GROUP=yunify

{{range $role := lsdir "/self/hosts"}}
    {{range $dir := lsdir (printf "/self/hosts/%s" $role)}}{{$ip := getv (printf "/self/hosts/%s/%s/ip" $role $dir)}}
    {{if eq (getv "/self/host/ip") $ip}} 
role={{printf "\"%s\"" $role}}
    {{end}} 
    {{end}}
{{end}}
{{if eq (getv "/self/env/database") "remote"}}
database_server_local=0
{{else}}
database_server_local=1
{{end}}
init_database() {
    if [ $database_server_local -eq 1 ];then
        if [ -e "$MYSQL_DATA" ]; then
            rm -rf $MYSQL_DATA
        fi
        cp -r /usr/local/mysql/mysql.tgz /data/
        tar -zxf /data/mysql.tgz -C /data
        chown -R ubuntu:ubuntu $MYSQL_DATA
        rm /data/mysql.tgz
    fi
}
start_database() {
    #role is hue-server and if database is local
    if [ $role = "hue-server" -a $database_server_local -eq 1 ];then
        if test -r $MYSQL_DATA/`hostname`.pid;then
	        return 0
        else
            sudo -u ubuntu service mysql.server start >& /dev/null
            run=$?
            if [ $run -ne 0 ];then
                echo "start database error!"
            fi
            return $run
        fi
    fi
}
stop_database() {
    if test -r $MYSQL_DATA/`hostname`.pid;then
        sudo -u ubuntu service mysql.server stop >& /dev/null
        run=$?
        if [ $run -ne 0 ];then
            echo "stop database error!"
        fi
        return $run
    else
	    return 0
    fi
}
start_oozie() {
    return 0
    if [ $oozie_server -eq 1 ];then 
        if [ $role = "hue-server" -a $oozie_server_local -eq 1 ]||[ $role = "oozie-client" -a $oozie_server_local -eq 0 ];then
            /usr/local/oozie/bin/oozied.sh start
        fi
    fi
}
stop_oozie() {
    return 0
    /usr/local/oozie/bin/oozied.sh stop
}
init_oozie() {
    return 0
}
init_hue() {
    if [ ! -e "$LOG_DIR" ]; then
        mkdir -p $LOG_DIR
    fi
    this_date=`date +%Y-%m-%d`
    this_time=`date +%T`
    echo "$this_date $this_time LOG" >> $LOG_DIR/init.log

    chown -R $HUE_USER:$HUE_GROUP /data/hue

    #if database is not local, then init the database of hue
    if [ $role = "hue-server" -a $database_server_local -eq 0 ];then
        mv $CONF_DIR/hue.ini $CONF_DIR/hue.ini.wait
        cp $CONF_DIR/hue.ini.template $CONF_DIR/hue.ini
        hue syncdb --noinput 2>&1 1>>$LOG_DIR/init.log
        hue migrate 2>&1 1>>$LOG_DIR/init.log
        rm $CONF_DIR/hue.ini
        mv $CONF_DIR/hue.ini.wait $CONF_DIR/hue.ini
    fi
    if [ $role = "hue-server" -a $database_server_local -eq 1 ];then
        echo "Database local done!" >> $LOG_DIR/init.log
    fi
}
start_hue() {
    if test -r $PID; then
        if kill -0 `cat $PID` > /dev/null 2>&1; then
            echo "command running as process `cat $PID`.  Stop it first."
        else
            rm $PID*
        fi
    else 
        supervisor -l $LOG_DIR -d
	    sleep 1
	    loop=$TIMEOUT
	    force=1
	    while [ $loop -gt 0 ];do
	        if test -r $PID; then
	        	force=0
                break
	        else
	    	    sleep 1
	    	    loop=`expr $loop - 1`
	        fi
	    done
	    if [ $force -eq 0 ]; then
	        echo "Success."
	    else
	        echo "Start Hue Timeout."
	        return 1
        fi
    fi
}
stop_hue() {
    if test -r $PID;then
        if kill -0 `cat $PID` > /dev/null 2>&1;then
            kill -2 `cat $PID`
            sleep 1
	        loop=$TIMEOUT
	        force=1
	        while [ $loop -gt 0 ];do
	            if test -r $PID; then
	            	sleep 1
	        	    loop=`expr $loop - 1`
	            else
                    force=0
                    break
	            fi
	        done
	        if [ $force -eq 0 ]; then
	            echo "Success."
	        else
	            echo "Stop Hue Timeout."
                return 1
            fi
        else
            rm $PID*
        fi
    else
        echo "No pid file found."
        return 1
    fi    
}
stop() {
    echo "Stoping hue... "
    stop_hue
    if [ $? -ne 0 ];then
        return 1;
    fi
    echo "Stoping oozie... "
    stop_oozie
    if [ $? -ne 0 ];then
        return 1;
    fi
    echo "Stoping database... "
    stop_database
    if [ $? -ne 0 ];then
        return 1;
    fi
}
start() {
    echo "Starting database... "
    start_database
    if [ $? -ne 0 ];then
        return 1;
    fi
    echo "Starting oozie... "
    start_oozie
    if [ $? -ne 0 ];then
        return 1;
    fi
    echo "Starting hue... "
    start_hue
    if [ $? -ne 0 ];then
        return 1;
    fi
}
init() {
    init_database
    if [ $? -ne 0 ];then
        return 1;
    fi
    start_database
    if [ $? -ne 0 ];then
        return 1;
    fi
    init_oozie
    if [ $? -ne 0 ];then
        return 1;
    fi
    init_hue
    if [ $? -ne 0 ];then
        return 1;
    fi
}
status_hue() {
    if test -r $PID;then
        echo "hue running. pid=`cat $PID`"
        return 0
    else
        echo "hue not running."
        return 1
    fi
}
if [ $# -le 1 ];then
    case "$1" in
        start)
    	start
    	;;
        stop)
    	stop
    	;;
        restart)
    	stop
    	start
    	;;
        status)
    	status_hue
    	;;
        init)
        init
        ;;
        *)
    	echo $"Usage: $ {start|stop|restart|status|init}"
    esac
else
    case "$1" in
        oozie)
            case "$2" in
            init)
            init_oozie
            ;;
            start)
            start_oozie
            ;;
            stop)
            stop_oozie
            ;;
            restart)
            stop_oozie
            start_oozie
            ;;
            *)
            echo $"Usage: oozie $ {start|stop|restart}"
            ;;
            esac
        ;;
        *)
        echo $"Usage: $ {oozie}"
    esac
fi
